
%% generated by soap from: /home/yogesh/Desktop1/sem6/cc/assignments/group-assign/calculator/src/calculator
%% for service "Calculator" and port "CalculatorSoap"
%% using options: [{service,"Calculator"},{port,"CalculatorSoap"},{generate,both},{namespaces,[{"http://example.com/calculator.xsd","P0"}]},{generate_tests,both},{http_server,soap_server_cowboy_2},{server_name,"calculator_server"},{http_client,soap_client_ibrowse},{client_name,"calculator_client"},{strict,true}]

%%% This file contains record and type decarations that are used by the WSDL.
%%%
%%% It also contains a macro 'INTERFACE' that is used to make information
%%% about the WSDL available to the SOAP implementation.
%%%
%%% It is possible (and in some cases necessary) to change the name of the
%%% record fields.
%%%
%%% It is possible to add default values, but be aware that these will only
%%% be used when *writing* an xml document.

%%% Records used to represent fault response messages:

-record(faultdetail, {uri :: string(),
                      tag :: string(),
                      text :: string()}).

-record(faultcode, {uri :: string(),
                    code :: string(),
                    subcode :: #faultcode{} % only v. 1.2
                   }).

-record(faultreason, {text :: string(),
                      language :: string()}).

-record(soap_fault_1_1, {faultcode :: #faultcode{},
                         faultstring :: string(),
                         faultactor :: string(),
                         detail :: [#faultdetail{}]}).

-record(soap_fault_1_2, {code :: #faultcode{},
                         reason :: [#faultreason{}],
                         role :: string(),
                         detail :: [#faultdetail{}]}).

%% xsd:QName values are translated to #qname{} records.
-record(qname, {uri :: string(),
                localPart :: string(),
                prefix :: string(),
                mappedPrefix :: string()}).



-record('P0:DivideResponse', {
	'DivideResult' :: integer()}).

-type 'P0:DivideResponse'() :: #'P0:DivideResponse'{}.


-record('P0:Divide', {
	intA :: integer(),
	intB :: integer()}).

-type 'P0:Divide'() :: #'P0:Divide'{}.


-record('P0:MultiplyResponse', {
	'MultiplyResult' :: integer()}).

-type 'P0:MultiplyResponse'() :: #'P0:MultiplyResponse'{}.


-record('P0:Multiply', {
	intA :: integer(),
	intB :: integer()}).

-type 'P0:Multiply'() :: #'P0:Multiply'{}.


-record('P0:SubtractResponse', {
	'SubtractResult' :: integer()}).

-type 'P0:SubtractResponse'() :: #'P0:SubtractResponse'{}.


-record('P0:Subtract', {
	intA :: integer(),
	intB :: integer()}).

-type 'P0:Subtract'() :: #'P0:Subtract'{}.


-record('P0:AddResponse', {
	'AddResult' :: integer()}).

-type 'P0:AddResponse'() :: #'P0:AddResponse'{}.


-record('P0:Add', {
	intA :: integer(),
	intB :: integer()}).

-type 'P0:Add'() :: #'P0:Add'{}.
-define(INTERFACE, {interface,"Calculator",calculator,'1.1',
                    soap_client_ibrowse,soap_server_cowboy_2,
                    calculator_server,calculator_client,[],
                    "http://example.com/calculator.wsdl",
                    "http://schemas.xmlsoap.org/soap/envelope/",undefined,
                    undefined,"http://localhost:8080","CalculatorSoap",
                    "CalculatorSoap","CalculatorSoap",
                    [{op,"add",add,"add",undefined,request_response,'P0:Add',
                      'P0:AddResponse',undefined},
                     {op,"subtract",subtract,"subtract",undefined,
                      request_response,'P0:Subtract','P0:SubtractResponse',
                      undefined},
                     {op,"multiply",multiply,"multiply",undefined,
                      request_response,'P0:Multiply','P0:MultiplyResponse',
                      undefined},
                     {op,"divide",divide,"divide",undefined,request_response,
                      'P0:Divide','P0:DivideResponse',undefined}],
                    {model,
                     [{type,'_document',sequence,
                       [{el,
                         [{alt,'P0:Add','P0:Add',[],1,1,true,undefined},
                          {alt,'P0:AddResponse','P0:AddResponse',[],1,1,true,
                           undefined},
                          {alt,'P0:Subtract','P0:Subtract',[],1,1,true,
                           undefined},
                          {alt,'P0:SubtractResponse','P0:SubtractResponse',
                           [],1,1,true,undefined},
                          {alt,'P0:Multiply','P0:Multiply',[],1,1,true,
                           undefined},
                          {alt,'P0:MultiplyResponse','P0:MultiplyResponse',
                           [],1,1,true,undefined},
                          {alt,'P0:Divide','P0:Divide',[],1,1,true,undefined},
                          {alt,'P0:DivideResponse','P0:DivideResponse',[],1,
                           1,true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,1,1,1,false,undefined},
                      {type,'P0:DivideResponse',sequence,
                       [{el,
                         [{alt,'P0:DivideResult',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'P0:Divide',sequence,
                       [{el,
                         [{alt,'P0:intA',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2},
                        {el,
                         [{alt,'P0:intB',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'P0:MultiplyResponse',sequence,
                       [{el,
                         [{alt,'P0:MultiplyResult',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'P0:Multiply',sequence,
                       [{el,
                         [{alt,'P0:intA',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2},
                        {el,
                         [{alt,'P0:intB',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'P0:SubtractResponse',sequence,
                       [{el,
                         [{alt,'P0:SubtractResult',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'P0:Subtract',sequence,
                       [{el,
                         [{alt,'P0:intA',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2},
                        {el,
                         [{alt,'P0:intB',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'P0:AddResponse',sequence,
                       [{el,
                         [{alt,'P0:AddResult',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'P0:Add',sequence,
                       [{el,
                         [{alt,'P0:intA',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,2},
                        {el,
                         [{alt,'P0:intB',
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         1,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined}],
                     [{ns,"http://example.com/calculator.xsd","P0",qualified},
                      {ns,"http://www.w3.org/2001/XMLSchema","xsd",qualified}],
                     "http://example.com/calculator.xsd",[],false,skip},
                    1,undefined,
                    [{"http://example.com/calculator.xsd","P0"}]}).
